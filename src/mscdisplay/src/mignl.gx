include <imhdr.h>
include "mosim.h"
include "mosgeom.h"
include "mosproc.h"

define	LINE	Meml[IMIDX($1)+1]	# Current line count in index array

# NOTE: These routines only realy work for 2D images!
#       Could be generalised but life's too short just now.

$for (silrd)

# MINL_INITx -- Set starting vectors for MIGNLx calls

procedure minl_init$t (mi, v)

pointer	mi		#I MOSIM Pointer for mosaic.
long	v[IM_MAXDIM]	#I Initial value for loop counter.

int	nimage, onx, ony, ocy1, ocy2, icy1, icy2, idy1, image
pointer	omg, sb, obuf, img

include "mosproc.com"

begin
        nimage = MI_NIMS(mi)
        omg    = MI_MG(mi, nimage+1)
        onx    = NX(omg)
	ony    = NY(omg)
	ocy1   = CY1(omg)
	ocy2   = CY2(omg)

        if (MI_SB(mi) == NULL) {
            call malloc (sb,   LEN_SECBUFF, TY_STRUCT)
            call malloc (obuf, onx,         TY_PIXEL)
            MI_SB(mi)      = sb
            SB_DATA(sb)    = obuf
        } else {
	    sb = MI_SB(mi)

	    # Free old data buffer if any and allocate a new one
	    if (SB_DATA(sb) != NULL)
		call mfree (SB_DATA(sb), SB_PIXTYPE(sb))
            call malloc (obuf, onx,         TY_PIXEL)
            SB_DATA(sb)    = obuf
	}

	# Set data buffer pixel type
	SB_PIXTYPE(sb) = TY_PIXEL

	# Convert line counter from image to ccd coordinates
	v[2] = v[2] + ocy1 - 1
	# Initialise loop counters
	call amovl (v, Meml[IMIDX(omg)], IM_MAXDIM)

	do image = 1, nimage {
	    img = MI_MG(mi, image)
	    call amovl (v, Meml[IMIDX(img)], IM_MAXDIM)

	    if (trim) {
		icy1 = CTY1(img)
		icy2 = CTY2(img)
		idy1 = TY1(img)
	    } else {
		icy1 = CY1(img)
		icy2 = CY2(img)
		idy1 = DY1(img)
	    }

	    if (v[2] <= icy1) {
		LINE(img) = idy1
	    } else if (v[2] <= icy2) {
		LINE(img) = v[2] - (ocy1 - icy1) + idy1
	    } else {
	        LINE(img) = NY(img) + 1   
	    }
	}
end

# MIGNLx -- Get and process next line from sub-image of mosaic.

int procedure mignl$t (mi, obuf, v)

pointer	mi		#I MOSIM Pointer for mosaic.
pointer	obuf		#O On output pointer to data values.
long	v[IM_MAXDIM]	#I Loop counter.
# function value	#O Number of pixels in line or EOF.

pointer	omg, sb, img, iim, ibuf, iptr, optr, ovr
int	onx, ocx1, ocy2, icx1, icx2, icy1, icy2, idx1, idy1
int	nimage, line, iline, nx, image, novr

int	mscnl$t()

errchk	mscnl$t, linebias$t, malloc, syserrs

include	"mosproc.com"

begin
	nimage = MI_NIMS(mi)
	omg    = MI_MG(mi, nimage+1)
	onx    = NX(omg)
	ocx1   = CX1(omg)
	ocy2   = CY2(omg)

	# Perform zero-trip test (assumes 2D image)
	if (v[2] > ocy2)
	    return (EOF)

	# Perform first time initialisation
        if (MI_SB(mi) == NULL) {
	    call minl_init$t (mi, v)
	} else {
	    # Reinitialise if caller has changed v since last call.
	    if (LINE(omg) != v[2])	# Assumes 2D image.
		call minl_init$t (mi, v)
	}

	# Fill output buffer from input images.
	#
	sb   = MI_SB(mi)
	obuf = SB_DATA(sb)
	line = LINE(omg)

	# Initialise  buffer with blank value
	call amovk$t (PIXEL(blank), Mem$t[obuf], onx)

	# Loop over input images, skipping those which have no data in
	# current line.
	do image = 1, nimage {
	    img = MI_MG(mi, image)
	    icy1 = CY1(img)
	    icy2 = CY2(img)
	    if (line < icy1 || line > icy2)
		next
	    icx1 = CX1(img)
	    icx2 = CX2(img)
	    idx1 = DX1(img)
	    idy1 = DY1(img)

	    # Get corresponding line of input image
	    iim   = MI_IM(mi, image)
	    if (mscnl$t (img, ibuf, Meml[IMIDX(img)]) == EOF)
		next

	    # Process input image line  writing to output buffer
	    iptr  = ibuf + idx1 - 1
	    optr  = obuf + icx1 - ocx1
	    nx    = icx2 - icx1 + 1
	    iline = line - CY1(img) + 1
	    ovr   = ibuf + BX1(img) - 1
	    novr  = BX2(img) - BX1(img) + 1

	    call miproc$t (img, Mem$t[iptr], Mem$t[optr], nx, iline,
	    Mem$t[ovr], novr)
	}

	# Bump loop counters ready for next trip (assumes 2D)
	v[2] = v[2] + long(1)
	LINE(omg) = v[2]

	return (onx)
end

$endfor
